
//Licensed Materials - Property of IBM 
//(c) Copyright IBM Corporation 2006, 2018. All Rights Reserved.

package com.telelogic.rhapsody.core;


/**
 * The IRPOperation interface represents operations of classes in Rhapsody models.
 */
public interface IRPOperation  extends IRPInterfaceItem {
	/**
 	 * Creates a flowchart for the operation.
 	 */
	public void createAutoFlowChart();
	/**
 	 * Deletes a specific argument from the operation.
 	 * @param argument The argument that should be deleted
 	 */
	public void deleteArgument(IRPArgument argument);
	/**
 	 * Deletes the flowchart or activity defined for the operation.
 	 */
	public void deleteFlowchart();
	/**
 	 * Returns the body of the operation.
 	 * @return the body of the operation
 	 */
	public String getBody();
	/**
 	 * Returns the flowchart or activity defined for the operation.
 	 * @return the flowchart or activity defined for the operation
 	 */
	public IRPFlowchart getFlowchart();
	/**
 	 * Returns the signature of the operation as it will appear in the generated code.
 	 * @return the signature of the operation as it will appear in the generated code
 	 */
	public String getImplementationSignature();
	/**
 	 * For constructors, gets the initializer code that was defined for the operation.
 	 * @return the initializer code that was defined for the operation
 	 */
	public String getInitializer();
	/**
 	 * Checks whether the operation was defined as abstract.
 	 * @return 1 if the operation was defined as abstract, 0 otherwise
 	 */
	public int getIsAbstract();
	/**
 	 * Checks whether the operation is an operation that is automatically generated by Rhapsody.
 	 * @return 1 if the operation is automatically generated by Rhapsody, 0 otherwise
 	 */
	public int getIsCgDerived();
	/**
 	 * For operations in C++ classes, checks whether the operation was defined as a constant member function.
 	 * @return 1 if the operation was defined as a constant member function, 0 otherwise
 	 */
	public int getIsConst();
	/**
 	 * Checks whether the operation is a constructor.
 	 * @return 1 if the operation is a constructor, 0 otherwise
 	 */
	public int getIsCtor();
	/**
 	 * Checks whether the operation is a destructor.
 	 * @return 1 if the operation is a destructor, 0 otherwise
 	 */
	public int getIsDtor();
	/**
 	 * For operations in Java classes, checks whether the operation was defined as final.
 	 * @return 1 if the operation was defined as final, 0 otherwise
 	 */
	public int getIsFinal();
	/**
 	 * Checks whether the code for the operation will be generated inline.
 	 * @return 1 if the code for the operation will be generated inline, 0 otherwise
 	 */
	public int getIsInline();
	/**
 	 * Checks whether the operation was defined as static.
 	 * @return 1 if the operation was defined as static, 0 otherwise
 	 */
	public int getIsStatic();
	/**
 	 * Checks whether the operation was defined as a triggered operation.
 	 * @return 1 if the operation is a triggered operation, 0 otherwise
 	 */
	public int getIsTrigger();
	/**
 	 * For operations in C++ or C# classes, checks whether the operation was defined as virtual.
 	 * @return 1 if the operation was defined as virtual, 0 otherwise
 	 */
	public int getIsVirtual();
	/**
 	 * If an on-the-fly type is used as the return type of an operation, this method returns the declaration for the type.
 	 * @return the declaration for the return type
 	 */
	public String getReturnTypeDeclaration();
	/**
 	 * Gets the return type of the operation.
 	 * @return the return type of the operation
 	 */
	public IRPClassifier getReturns();
	/**
 	 * Gets the visibility specified for the operation.
 	 * @return the visibility specified for the operation
 	 */
	public String getVisibility();
	/**
 	 * Sets the body of an operation.
 	 * @param body The code to use for the body of the operation. Use \n to represent the line breaks, for example, <code>takePicture.setBody("openShutter();\ncloseShutter();");</code>
 	 */
	public void setBody(String body);
	/**
 	 * Specifies a flowchart or activity for the operation.
 	 * @param flowchart the flowchart or activity to use for the operation 
 	 */
	public void setFlowchart(IRPFlowchart flowchart);
	/**
 	 * For constructors, used to specify code for the initializer of the operation.
 	 * @param initializer The code to use for the initializer of the operation
 	 */
	public void setInitializer(String initializer);
	/**
 	 * Specifies whether an operation should be defined as abstract.
 	 * @param isAbstract Use 1 to specify that the operation should be defined as abstract. Use 0 to specify that the operation should not be defined as abstract.
 	 */
	public void setIsAbstract(int isAbstract);
	/**
 	 * For operations in C++ classes, used to specify whether an operation should be defined as a constant member function.
 	 * @param isConst Use 1 to specify that the operation should be defined as a constant member function. Use 0 to specify that the operation should not be defined as a constant member function.
 	 */
	public void setIsConst(int isConst);
	/**
 	 * For operations in Java classes, used to specify whether an operation should be defined as final.
 	 * @param isFinal Use 1 to specify that the operation should be defined as final. Use 0 to specify that the operation should not be defined as final.
 	 */
	public void setIsFinal(int isFinal);
	/**
 	 * Specifies whether an operation should be defined as static.
 	 * @param isStatic Use 1 to specify that the operation should be defined as static. Use 0 to specify that the operation should not be defined as static.
 	 */
	public void setIsStatic(int isStatic);
	/**
 	 * For operations in C++ or C# classes, used to specify whether an operation should be defined as virtual.
 	 * @param isVirtual Use 1 to specify that the operation should be defined as virtual. Use 0 to specify that the operation should not be defined as virtual.
 	 */
	public void setIsVirtual(int isVirtual);
	/**
 	 * Creates an on-the-fly type to use as the return type of the operation, using the declaration that you provide as a parameter.
 	 * @param newVal The declaration to use for the on-the-fly type that is to be created to use as the return type of the operation
 	 */
	public void setReturnTypeDeclaration(String newVal);
	/**
 	 * Specifies the return type of the operation.
 	 * @param returns the return type to use for the operation 
 	 */
	public void setReturns(IRPClassifier returns);
	/**
 	 * Sets the visibility of the operation.
 	 * @param visibility the visibility to use for the operation. Can take one of the following values: Public, Protected, Private. For Java models, the parameter can also take the value Default.
 	 * @throws RhapsodyRuntimeException
 	 */
	public void setVisibility(String visibility);
	/**
 	 * Updates the views on the Rhapsody Model Manager server for all the diagrams contained in the operation.
 	 * @param enforceUpdate Use 0 to specify that a view should be updated only if changes that affect the diagram were made since the last update. Use 1 to specify that views should be updated regardless of whether or not changes that affect the diagram were made since the last update.
 	 * @return the number of views that were updated on the server. If no diagrams require an update, 0 is returned. If the update attempt failed, -1 is returned.
 	 * @throws RhapsodyRuntimeException
 	 */
	public int updateContainedDiagramsOnServer(int enforceUpdate);


}

